package Day08;

public class Day08_1 {
	
	public static void main(String[] args) {
	
		// 클래스 : 여러개 변수 묶음 => 객체화 
		
		// 예제1: 아이디,비밀번호,성명,나이 입력받아 3명의 회원(객체) 만들기
			// 1. 클래스 설계 [ 필드(변수) , 메소드(함수) , 생성자 ]
			// 2. 클래스기반으로 객체 생성
				// 클래스명 객체명 = new 클래스명();
			// 3. 내용 담기 [ 객체는 클래스에 접근 가능 [ 접근연산자 : . ]
				// 1. 객체명.필드명
				// 2. new 클래스명(  ) : 생성자로 내용 담기 
			// 4. 메소드 : 함수
				// 함수 : 함[상자] 수[숫자] : 상자 안에 들어있는 수 => 미리 넣어둔 수 
				// 메소드 : 미리 작성된 코드
					// 1. 한번 사용되는 코드는 => 메소드로 만들 필요 없음
					// 1. 재활성[ 반복되는 코드 ] => 메소드 만들 효율성 크다 
					// 2. 복잡한 코드 묶음
					// 3. 인수 와 반환값 존재 [ 메모리 효율성 ]
						// 1. 인수 : 들어가는 수(코드)
						// 2. 반환 : 돌려주는 수(코드)
					// 4. 메소드{ } 안에서 선언된 변수는 실행후 종료되면 초기화
						// 남길 데이터는 반환해서 꺼내오기 
						// return
		
		// 1번째 회원
		회원 회원1 = new 회원(); // 객체 생성  => 1번째 생성자 사용 => 없음 
		
			System.out.println("--->회원1의 정보");
		회원1.회원정보(); // 메소드 호출
		
		회원1.아이디="qwe"; // 필드에 접근해서 값넣기 
		회원1.비밀번호="qwe";
		회원1.성명="qwe";
		회원1.나이=30;
		
			System.out.println("--->회원1의 정보");
		회원1.회원정보(); // 메소드 호출 
		
		// 2번째 회원
		회원 회원2 = new 회원("asd"); // 2번째를 생성자 사용 => 아이디만 받고 
		회원2.비밀번호="asd";
		회원2.성명="asd";
		회원2.나이=30;
		
			System.out.println("--->회원2의 정보");
		회원2.회원정보();
		
		// 3번째 회원 
		회원 회원3 = new 회원("zxc", "zxc", "zxc", 40);
			System.out.println("--->회원3의 정보");
		회원3.회원정보();
		

	}
}
