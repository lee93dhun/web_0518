package Day12;

import Day12_2.Day12_3;

public class Day12_1 {

	public static void main(String[] args) {
		
		// 1. 상속 : extends
			// 1. 슈퍼 클래스의 멤버를 상속받아 그대로 사용가능 혹은 재정의 가능
			// 2. extends 뒤에는 하나의 클래스만 가능 !!!!! 
			// super.멤버 : 슈퍼클래스에 멤버 접근 
			// @Override : 슈퍼클래스 멤버 재정의
		
		// 2. 인터페이스 : implements 
			// 1. 동일한 목적하에 동일한 메소드[기능]을 처리 역할 
			// 2. implements 뒤에는 여러개의 인테페이스 가능 
			// 특징 : 추상메소드를 선언만 => 실제 정의는 연결된 클래스에서 정의
			// @Override : 슈퍼클래스 멤버 재정의	
		
		// ** 접근제한자  : 필드 , 생성자 , 메소드 가 외부로부터 호출 제한 
			// 1. 선언시 맨 앞에서 작성 
			// 2. 종류 
					// 가정 : 프로젝트 내 접근 
				// public : 모든 곳에서 접근 가능
				// protected : 동일한 패키지내에서 접근 가능 [ 상속받은 클래스는 다른 패키지 접근 가능 ]
				// default   : 동일한 패키지내에서 접근 가능 
				// private : 현재 클래스에서만 접근 가능 
		
		// 예제 1 : 동일 패키지 
		Day12_2 day12_2 = new Day12_2();
	
		day12_2.아이디 = "qwe"; //  public 필드는 다른 클래스에서 접근 가능 
		// day12_2.성명 = "유재석"; //  private 필드는 다른 클래스에서 접근 불가 
		day12_2.연락처 = "123"; //  default 필드는 동일한 패키지에서 접근 가능 
		day12_2.성별 = "남자";  // protected 필드는 동일한 패키지에서 접근 가능 
		
		day12_2.필드접근("유재석"); // public 메소드를 통한 private 필드 접근 
		
		// 예제 2 : 다른 패키지 
		Day12_3 day12_3 = new Day12_3();
		
		day12_3.아이디 = "qwe"; // public 필드는 다른 패키지에서 접근 가능 
		// day12_3.성명 = "유재석"; // private 필드는 다른 패키지에서 접근 불가 
		// day12_3.연락처 = "123"; // default 필드는 다른 패키지에서 접근 불가 
		day12_3.성별 = "남자"; // protected 필드는 다른 패키지에서 접근 불가
		
		day12_3.필드접근("유재석"); // public 메소드를 통한 private 필드 접근 
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		

	}
	
	
}
